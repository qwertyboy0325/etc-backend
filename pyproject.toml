[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "etc-pointcloud-backend"
version = "1.0.0"
description = "ETC Point Cloud Annotation System Backend"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "ETC Team", email = "dev@etc.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
]

[project.urls]
Homepage = "https://github.com/etc/pointcloud-backend"
Repository = "https://github.com/etc/pointcloud-backend"
Issues = "https://github.com/etc/pointcloud-backend/issues"

[tool.poetry]
name = "etc-pointcloud-backend"
version = "1.0.0"
description = "ETC Point Cloud Annotation System Backend"
authors = ["ETC Team <dev@etc.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
alembic = "^1.13.0"
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
redis = "^5.0.1"
celery = "^5.3.4"
flower = "^2.0.1"
boto3 = "^1.34.0"
minio = "^7.2.0"
numpy = "^1.26.2"
python-dateutil = "^2.8.2"
pytz = "^2023.3"
email-validator = "^2.1.0"
jinja2 = "^3.1.2"
aiofiles = "^23.2.0"
httpx = "^0.25.2"
pydantic-extra-types = "^2.2.0"
slowapi = "^0.1.9"
structlog = "^23.2.0"
prometheus-client = "^0.19.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
pytest-mock = "^3.12.0"
factory-boy = "^3.3.0"
faker = "^20.1.0"
httpx = "^0.25.2"
pytest-xdist = "^3.5.0"
bandit = "^1.7.5"
safety = "^2.3.5"
coverage = "^7.3.2"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.2"
mkdocs-mermaid2-plugin = "^1.1.1"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["app", "tests"]

# flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503", "E231"]
exclude = [".git", "__pycache__", ".venv", "migrations", "venv", "ENV", "env"]
per-file-ignores = [
    "__init__.py:F401",
    "*/migrations/*:E501,W503",
]

# mypy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true
exclude = [
    "migrations/",
    "tests/",
    "venv/",
    ".venv/",
]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "flower.*",
    "minio.*",
    "slowapi.*",
    "prometheus_client.*",
    "factory.*",
    "faker.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_start

[tool.bandit.assert_used]
skips = ['*_test.py', 'test_*.py']
